name: CI/CD - Office CentOS Server

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build frontend (Vite)
        working-directory: ./frontend
        run: |
          echo "VITE_API_BASE_URL=https://example.com/api" > .env
          npm ci
          npm run build
          tar -czf dist.tar.gz dist

      - name: Upload artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist.tar.gz

      - name: Prepare backend package (exclude node_modules)
        run: |
          cd backend
          tar --exclude='node_modules' -czf backend.tar.gz .
        shell: bash

      - name: Copy artifacts to server
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "frontend/dist.tar.gz, backend/backend.tar.gz"
          target: "/home/deployuser/deploy_workspace/"

      - name: Deploy on server (extract, install, atomic swap, restart)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            set -e
            mkdir -p /home/deployuser/deploy_workspace
            cd /home/deployuser/deploy_workspace

            # Extract frontend to a temp dir then atomic swap
            rm -rf /home/deployuser/deploy_workspace/frontend_tmp
            mkdir -p frontend_tmp
            tar -xzf dist.tar.gz -C frontend_tmp
            sudo mkdir -p /var/www/example.com
            sudo chown -R deployuser:deployuser /var/www/example.com
            # atomic swap
            rm -rf /var/www/example.com/frontend_old || true
            if [ -d /var/www/example.com/frontend ]; then
              mv /var/www/example.com/frontend /var/www/example.com/frontend_old
            fi
            mv frontend_tmp /var/www/example.com/frontend
            rm -rf /var/www/example.com/frontend_old

            # Extract backend and install server-side deps
            rm -rf /home/deployuser/project/backend_old || true
            mkdir -p /home/deployuser/project
            tar -xzf backend.tar.gz -C /home/deployuser/project
            cd /home/deployuser/project/backend
            npm ci --omit=dev

            # Ensure .env exists
            if [ ! -f /home/deployuser/project/backend/.env ]; then
              echo "PORT=4001" > /home/deployuser/project/backend/.env
              echo "MONGO_URI=mongodb://localhost:27017/ampriDB" >> /home/deployuser/project/backend/.env
              echo "NODE_ENV=production" >> /home/deployuser/project/backend/.env
              echo "CLIENT_URL=https://example.com" >> /home/deployuser/project/backend/.env
              # NOTE: do not echo secrets here â€” instead use server-side secure storage.
            fi

            # Start / Restart via PM2 using ecosystem file if present
            if [ -f ecosystem.config.js ]; then
              pm2 startOrReload ecosystem.config.js --env production
            else
              pm2 restart ampri-backend || pm2 start main.js --name ampri-backend --update-env
            fi
            pm2 save
